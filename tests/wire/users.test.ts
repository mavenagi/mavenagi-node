/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";

describe("Users", () => {
    test("createOrUpdate", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            userId: { referenceId: "user-0" },
            identifiers: [{ value: "joe@myapp.com", type: "EMAIL" }],
            data: { name: { value: "Joe", visibility: "VISIBLE" } },
        };
        const rawResponseBody = {
            userId: {
                referenceId: "user-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "USER_PROFILE",
            },
            identifiers: [{ value: "joe@myapp.com", type: "EMAIL" }],
            data: { name: { value: "Joe", visibility: "VISIBLE" } },
            allUserData: { myapp: { name: "Joe" } },
            defaultUserData: { name: "Joe" },
        };
        server
            .mockEndpoint()
            .put("/v1/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.createOrUpdate({
            userId: {
                referenceId: "user-0",
            },
            identifiers: [
                {
                    value: "joe@myapp.com",
                    type: "EMAIL",
                },
            ],
            data: {
                name: {
                    value: "Joe",
                    visibility: "VISIBLE",
                },
            },
        });
        expect(response).toEqual({
            userId: {
                referenceId: "user-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "USER_PROFILE",
            },
            identifiers: [
                {
                    value: "joe@myapp.com",
                    type: "EMAIL",
                },
            ],
            data: {
                name: {
                    value: "Joe",
                    visibility: "VISIBLE",
                },
            },
            allUserData: {
                myapp: {
                    name: "Joe",
                },
            },
            defaultUserData: {
                name: "Joe",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            userId: {
                referenceId: "user-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "USER_PROFILE",
            },
            identifiers: [{ value: "joe@myapp.com", type: "EMAIL" }],
            data: { name: { value: "Joe", visibility: "VISIBLE" } },
            allUserData: { myapp: { name: "Joe" } },
            defaultUserData: { name: "Joe" },
        };
        server.mockEndpoint().get("/v1/users/user-0").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.users.get("user-0");
        expect(response).toEqual({
            userId: {
                referenceId: "user-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "USER_PROFILE",
            },
            identifiers: [
                {
                    value: "joe@myapp.com",
                    type: "EMAIL",
                },
            ],
            data: {
                name: {
                    value: "Joe",
                    visibility: "VISIBLE",
                },
            },
            allUserData: {
                myapp: {
                    name: "Joe",
                },
            },
            defaultUserData: {
                name: "Joe",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/v1/users/user-0").respondWith().statusCode(200).build();

        const response = await client.users.delete("user-0");
        expect(response).toEqual(undefined);
    });
});
