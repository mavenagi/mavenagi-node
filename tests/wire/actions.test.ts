/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";

describe("Actions", () => {
    test("createOrUpdate", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            actionId: { referenceId: "get-balance" },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    { preconditionType: "user", key: "userKey" },
                    { preconditionType: "user", key: "userKey2" },
                ],
            },
            language: "en",
        };
        const rawResponseBody = {
            actionId: {
                referenceId: "get-balance",
                appId: "my-billing-system",
                organizationId: "acme",
                agentId: "support",
                type: "ACTION",
            },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    { preconditionType: "user", key: "userKey" },
                    { preconditionType: "user", key: "userKey2" },
                ],
            },
            language: "en",
        };
        server
            .mockEndpoint()
            .put("/v1/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.createOrUpdate({
            actionId: {
                referenceId: "get-balance",
            },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    {
                        preconditionType: "user",
                        key: "userKey",
                    },
                    {
                        preconditionType: "user",
                        key: "userKey2",
                    },
                ],
            },
            language: "en",
        });
        expect(response).toEqual({
            actionId: {
                referenceId: "get-balance",
                appId: "my-billing-system",
                organizationId: "acme",
                agentId: "support",
                type: "ACTION",
            },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    {
                        preconditionType: "user",
                        key: "userKey",
                    },
                    {
                        preconditionType: "user",
                        key: "userKey2",
                    },
                ],
            },
            language: "en",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            actionId: {
                referenceId: "get-balance",
                appId: "my-billing-system",
                organizationId: "acme",
                agentId: "support",
                type: "ACTION",
            },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    { preconditionType: "user", key: "userKey" },
                    { preconditionType: "user", key: "userKey2" },
                ],
            },
            language: "en",
        };
        server
            .mockEndpoint()
            .get("/v1/actions/get-balance")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.get("get-balance");
        expect(response).toEqual({
            actionId: {
                referenceId: "get-balance",
                appId: "my-billing-system",
                organizationId: "acme",
                agentId: "support",
                type: "ACTION",
            },
            name: "Get the user's balance",
            description: "This action calls an API to get the user's current balance.",
            userInteractionRequired: false,
            userFormParameters: [],
            precondition: {
                preconditionType: "group",
                operator: "AND",
                preconditions: [
                    {
                        preconditionType: "user",
                        key: "userKey",
                    },
                    {
                        preconditionType: "user",
                        key: "userKey2",
                    },
                ],
            },
            language: "en",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/v1/actions/get-balance").respondWith().statusCode(200).build();

        const response = await client.actions.delete("get-balance");
        expect(response).toEqual(undefined);
    });
});
