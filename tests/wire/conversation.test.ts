/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";
import * as MavenAGI from "../../src/api/index";

describe("Conversation", () => {
    test("initialize", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            conversationId: { referenceId: "referenceId" },
            messages: [
                {
                    conversationMessageId: { referenceId: "referenceId" },
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                },
                {
                    conversationMessageId: { referenceId: "referenceId" },
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                },
            ],
        };
        const rawResponseBody = {
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: { capabilities: ["MARKDOWN", "MARKDOWN"], isCopilot: true, responseLength: "SHORT" },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: { metadata: "metadata" },
            allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                incompleteActionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        };
        server
            .mockEndpoint()
            .post("/v1/conversations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.initialize({
            conversationId: {
                referenceId: "referenceId",
            },
            messages: [
                {
                    conversationMessageId: {
                        referenceId: "referenceId",
                    },
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                },
                {
                    conversationMessageId: {
                        referenceId: "referenceId",
                    },
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                },
            ],
        });
        expect(response).toEqual({
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: {
                capabilities: ["MARKDOWN", "MARKDOWN"],
                isCopilot: true,
                responseLength: "SHORT",
            },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: {
                metadata: "metadata",
            },
            allMetadata: {
                allMetadata: {
                    allMetadata: "allMetadata",
                },
            },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                incompleteActionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: { capabilities: ["MARKDOWN", "MARKDOWN"], isCopilot: true, responseLength: "SHORT" },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: { metadata: "metadata" },
            allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                incompleteActionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        };
        server
            .mockEndpoint()
            .get("/v1/conversations/conversationId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.get("conversationId");
        expect(response).toEqual({
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: {
                capabilities: ["MARKDOWN", "MARKDOWN"],
                isCopilot: true,
                responseLength: "SHORT",
            },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: {
                metadata: "metadata",
            },
            allMetadata: {
                allMetadata: {
                    allMetadata: "allMetadata",
                },
            },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                incompleteActionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/v1/conversations/conversation-0").respondWith().statusCode(200).build();

        const response = await client.conversation.delete("conversation-0", {
            reason: "GDPR deletion request 1234.",
        });
        expect(response).toEqual(undefined);
    });

    test("appendNewMessages", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = [
            {
                conversationMessageId: { referenceId: "referenceId" },
                userId: { referenceId: "referenceId" },
                text: "text",
                userMessageType: "USER",
            },
            {
                conversationMessageId: { referenceId: "referenceId" },
                userId: { referenceId: "referenceId" },
                text: "text",
                userMessageType: "USER",
            },
        ];
        const rawResponseBody = {
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: { capabilities: ["MARKDOWN", "MARKDOWN"], isCopilot: true, responseLength: "SHORT" },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: { metadata: "metadata" },
            allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                incompleteActionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversationId/messages")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.appendNewMessages("conversationId", [
            {
                conversationMessageId: {
                    referenceId: "referenceId",
                },
                userId: {
                    referenceId: "referenceId",
                },
                text: "text",
                userMessageType: "USER",
            },
            {
                conversationMessageId: {
                    referenceId: "referenceId",
                },
                userId: {
                    referenceId: "referenceId",
                },
                text: "text",
                userMessageType: "USER",
            },
        ]);
        expect(response).toEqual({
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: {
                capabilities: ["MARKDOWN", "MARKDOWN"],
                isCopilot: true,
                responseLength: "SHORT",
            },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: {
                metadata: "metadata",
            },
            allMetadata: {
                allMetadata: {
                    allMetadata: "allMetadata",
                },
            },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                incompleteActionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        });
    });

    test("ask", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            conversationMessageId: { referenceId: "message-0" },
            userId: { referenceId: "user-0" },
            text: "How do I reset my password?",
            attachments: [{ type: "image/png", content: "iVBORw0KGgo..." }],
            transientData: { userToken: "abcdef123", queryApiKey: "foobar456" },
            timezone: "America/New_York",
        };
        const rawResponseBody = {
            conversationId: {
                referenceId: "conversation-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION",
            },
            deleted: false,
            analysis: { resolutionStatus: "Resolved", sentiment: "POSITIVE", resolvedByMaven: true },
            summary: {
                actionIds: [],
                incompleteActionIds: [],
                insertCount: 0,
                thumbsUpCount: 0,
                thumbsDownCount: 0,
                userMessageCount: 1,
                humanAgents: [],
                humanAgentsWithInserts: [],
                users: [],
            },
            metadata: {},
            allMetadata: {},
            messages: [
                {
                    type: "user",
                    userMessageType: "USER",
                    conversationMessageId: {
                        referenceId: "message-0",
                        appId: "myapp",
                        organizationId: "acme",
                        agentId: "support",
                        type: "CONVERSATION_MESSAGE",
                    },
                    userId: { referenceId: "user-0" },
                    text: "How do I reset my password?",
                    attachments: [{ url: "https://example.com/attachment-0", type: "image/png" }],
                },
                {
                    type: "bot",
                    botMessageType: "BOT_RESPONSE",
                    conversationMessageId: {
                        referenceId: "message-1",
                        appId: "myapp",
                        organizationId: "acme",
                        agentId: "support",
                        type: "CONVERSATION_MESSAGE",
                    },
                    status: "SENT",
                    responses: [{ type: "text", text: "Hi! Go to acme.com/reset-password" }],
                    metadata: { followupQuestions: ["What if I did not get the reset email?"], sources: [] },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversation-0/ask")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.ask("conversation-0", {
            conversationMessageId: {
                referenceId: "message-0",
            },
            userId: {
                referenceId: "user-0",
            },
            text: "How do I reset my password?",
            attachments: [
                {
                    type: "image/png",
                    content: "iVBORw0KGgo...",
                },
            ],
            transientData: {
                userToken: "abcdef123",
                queryApiKey: "foobar456",
            },
            timezone: "America/New_York",
        });
        expect(response).toEqual({
            conversationId: {
                referenceId: "conversation-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION",
            },
            deleted: false,
            analysis: {
                resolutionStatus: "Resolved",
                sentiment: "POSITIVE",
                resolvedByMaven: true,
            },
            summary: {
                actionIds: [],
                incompleteActionIds: [],
                insertCount: 0,
                thumbsUpCount: 0,
                thumbsDownCount: 0,
                userMessageCount: 1,
                humanAgents: [],
                humanAgentsWithInserts: [],
                users: [],
            },
            metadata: {},
            allMetadata: {},
            messages: [
                {
                    type: "user",
                    userMessageType: "USER",
                    conversationMessageId: {
                        referenceId: "message-0",
                        appId: "myapp",
                        organizationId: "acme",
                        agentId: "support",
                        type: "CONVERSATION_MESSAGE",
                    },
                    userId: {
                        referenceId: "user-0",
                    },
                    text: "How do I reset my password?",
                    attachments: [
                        {
                            url: "https://example.com/attachment-0",
                            type: "image/png",
                        },
                    ],
                },
                {
                    type: "bot",
                    botMessageType: "BOT_RESPONSE",
                    conversationMessageId: {
                        referenceId: "message-1",
                        appId: "myapp",
                        organizationId: "acme",
                        agentId: "support",
                        type: "CONVERSATION_MESSAGE",
                    },
                    status: "SENT",
                    responses: [
                        {
                            type: "text",
                            text: "Hi! Go to acme.com/reset-password",
                        },
                    ],
                    metadata: {
                        followupQuestions: ["What if I did not get the reset email?"],
                        sources: [],
                    },
                },
            ],
        });
    });

    test("generateMavenSuggestions", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            conversationMessageIds: [{ referenceId: "referenceId" }, { referenceId: "referenceId" }],
        };
        const rawResponseBody = {
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: { capabilities: ["MARKDOWN", "MARKDOWN"], isCopilot: true, responseLength: "SHORT" },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: { metadata: "metadata" },
            allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                incompleteActionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversationId/generate_maven_suggestions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.generateMavenSuggestions("conversationId", {
            conversationMessageIds: [
                {
                    referenceId: "referenceId",
                },
                {
                    referenceId: "referenceId",
                },
            ],
        });
        expect(response).toEqual({
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: {
                capabilities: ["MARKDOWN", "MARKDOWN"],
                isCopilot: true,
                responseLength: "SHORT",
            },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: {
                metadata: "metadata",
            },
            allMetadata: {
                allMetadata: {
                    allMetadata: "allMetadata",
                },
            },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                incompleteActionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        });
    });

    test("categorize", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { category: "category" };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversationId/categorize")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.categorize("conversationId");
        expect(response).toEqual({
            category: "category",
        });
    });

    test("createFeedback", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            feedbackId: { referenceId: "feedback-0" },
            userId: { referenceId: "user-0" },
            conversationId: { referenceId: "conversation-0" },
            conversationMessageId: { referenceId: "message-1" },
            type: "THUMBS_UP",
            text: "Great answer!",
        };
        const rawResponseBody = {
            feedbackId: {
                referenceId: "feedback-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "FEEDBACK",
            },
            conversationId: {
                referenceId: "conversation-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION",
            },
            conversationMessageId: {
                referenceId: "message-1",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION_MESSAGE",
            },
            userId: { referenceId: "user-0", appId: "myapp", organizationId: "acme", agentId: "support", type: "USER" },
            type: "THUMBS_UP",
            text: "Great answer!",
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/feedback")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.createFeedback({
            feedbackId: {
                referenceId: "feedback-0",
            },
            userId: {
                referenceId: "user-0",
            },
            conversationId: {
                referenceId: "conversation-0",
            },
            conversationMessageId: {
                referenceId: "message-1",
            },
            type: "THUMBS_UP",
            text: "Great answer!",
        });
        expect(response).toEqual({
            feedbackId: {
                referenceId: "feedback-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "FEEDBACK",
            },
            conversationId: {
                referenceId: "conversation-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION",
            },
            conversationMessageId: {
                referenceId: "message-1",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "CONVERSATION_MESSAGE",
            },
            userId: {
                referenceId: "user-0",
                appId: "myapp",
                organizationId: "acme",
                agentId: "support",
                type: "USER",
            },
            type: "THUMBS_UP",
            text: "Great answer!",
        });
    });

    test("submitActionForm", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { actionFormId: "actionFormId", parameters: { parameters: { key: "value" } } };
        const rawResponseBody = {
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        { type: "type", url: "url" },
                        { type: "type", url: "url" },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: { referenceId: "referenceId" },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: { capabilities: ["MARKDOWN", "MARKDOWN"], isCopilot: true, responseLength: "SHORT" },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: { metadata: "metadata" },
            allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                incompleteActionIds: [
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                    { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversationId/submit-form")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.submitActionForm("conversationId", {
            actionFormId: "actionFormId",
            parameters: {
                parameters: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual({
            messages: [
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
                {
                    type: "user",
                    conversationMessageId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    language: "language",
                    attachments: [
                        {
                            type: "type",
                            url: "url",
                        },
                        {
                            type: "type",
                            url: "url",
                        },
                    ],
                    userDisplayName: "userDisplayName",
                    userId: {
                        referenceId: "referenceId",
                    },
                    text: "text",
                    userMessageType: "USER",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            responseConfig: {
                capabilities: ["MARKDOWN", "MARKDOWN"],
                isCopilot: true,
                responseLength: "SHORT",
            },
            subject: "subject",
            url: "url",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            tags: ["tags"],
            metadata: {
                metadata: "metadata",
            },
            allMetadata: {
                allMetadata: {
                    allMetadata: "allMetadata",
                },
            },
            conversationId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            analysis: {
                userRequest: "userRequest",
                agentResponse: "agentResponse",
                resolutionStatus: "resolutionStatus",
                category: "category",
                sentiment: "POSITIVE",
                quality: "GOOD",
                qualityReason: "MISSING_KNOWLEDGE",
                resolvedByMaven: true,
                primaryLanguage: "primaryLanguage",
                predictedNps: 1.1,
            },
            summary: {
                actionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                incompleteActionIds: [
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    {
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                ],
                insertCount: 1,
                thumbsUpCount: 1,
                thumbsDownCount: 1,
                userMessageCount: 1,
                handleTime: 1000000,
                humanAgentResponseDelay: 1000000,
                humanAgents: ["humanAgents", "humanAgents"],
                humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                users: ["users", "users"],
            },
            deleted: true,
        });
    });

    test("addConversationMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { string: "string" };
        server
            .mockEndpoint()
            .post("/v1/conversations/conversationId/metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.addConversationMetadata("conversationId", {
            string: "string",
        });
        expect(response).toEqual({
            string: "string",
        });
    });

    test("updateConversationMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { appId: "conversation-owning-app", values: { key: "newValue" } };
        const rawResponseBody = {
            metadata: { myapp: { key: "newValue" }, "conversation-owning-app": { existingKey: "existingValue" } },
        };
        server
            .mockEndpoint()
            .put("/v1/conversations/conversation-0/metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.updateConversationMetadata("conversation-0", {
            appId: "conversation-owning-app",
            values: {
                key: "newValue",
            },
        });
        expect(response).toEqual({
            metadata: {
                myapp: {
                    key: "newValue",
                },
                "conversation-owning-app": {
                    existingKey: "existingValue",
                },
            },
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            conversations: [
                {
                    responseConfig: {
                        capabilities: ["MARKDOWN", "MARKDOWN"],
                        isCopilot: true,
                        responseLength: "SHORT",
                    },
                    subject: "subject",
                    url: "url",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    tags: ["tags"],
                    metadata: { metadata: "metadata" },
                    allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
                    conversationId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    analysis: {
                        userRequest: "userRequest",
                        agentResponse: "agentResponse",
                        resolutionStatus: "resolutionStatus",
                        category: "category",
                        sentiment: "POSITIVE",
                        quality: "GOOD",
                        qualityReason: "MISSING_KNOWLEDGE",
                        resolvedByMaven: true,
                        primaryLanguage: "primaryLanguage",
                        predictedNps: 1.1,
                    },
                    summary: {
                        actionIds: [
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                        ],
                        incompleteActionIds: [
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                        ],
                        insertCount: 1,
                        thumbsUpCount: 1,
                        thumbsDownCount: 1,
                        userMessageCount: 1,
                        handleTime: 1000000,
                        humanAgentResponseDelay: 1000000,
                        humanAgents: ["humanAgents", "humanAgents"],
                        humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                        users: ["users", "users"],
                    },
                    deleted: true,
                },
                {
                    responseConfig: {
                        capabilities: ["MARKDOWN", "MARKDOWN"],
                        isCopilot: true,
                        responseLength: "SHORT",
                    },
                    subject: "subject",
                    url: "url",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    tags: ["tags"],
                    metadata: { metadata: "metadata" },
                    allMetadata: { allMetadata: { allMetadata: "allMetadata" } },
                    conversationId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    analysis: {
                        userRequest: "userRequest",
                        agentResponse: "agentResponse",
                        resolutionStatus: "resolutionStatus",
                        category: "category",
                        sentiment: "POSITIVE",
                        quality: "GOOD",
                        qualityReason: "MISSING_KNOWLEDGE",
                        resolvedByMaven: true,
                        primaryLanguage: "primaryLanguage",
                        predictedNps: 1.1,
                    },
                    summary: {
                        actionIds: [
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                        ],
                        incompleteActionIds: [
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                            { type: "AGENT", appId: "appId", referenceId: "referenceId" },
                        ],
                        insertCount: 1,
                        thumbsUpCount: 1,
                        thumbsDownCount: 1,
                        userMessageCount: 1,
                        handleTime: 1000000,
                        humanAgentResponseDelay: 1000000,
                        humanAgents: ["humanAgents", "humanAgents"],
                        humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                        users: ["users", "users"],
                    },
                    deleted: true,
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        };
        server
            .mockEndpoint()
            .post("/v1/conversations/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversation.search({});
        expect(response).toEqual({
            conversations: [
                {
                    responseConfig: {
                        capabilities: ["MARKDOWN", "MARKDOWN"],
                        isCopilot: true,
                        responseLength: "SHORT",
                    },
                    subject: "subject",
                    url: "url",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    tags: ["tags"],
                    metadata: {
                        metadata: "metadata",
                    },
                    allMetadata: {
                        allMetadata: {
                            allMetadata: "allMetadata",
                        },
                    },
                    conversationId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    analysis: {
                        userRequest: "userRequest",
                        agentResponse: "agentResponse",
                        resolutionStatus: "resolutionStatus",
                        category: "category",
                        sentiment: "POSITIVE",
                        quality: "GOOD",
                        qualityReason: "MISSING_KNOWLEDGE",
                        resolvedByMaven: true,
                        primaryLanguage: "primaryLanguage",
                        predictedNps: 1.1,
                    },
                    summary: {
                        actionIds: [
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                        ],
                        incompleteActionIds: [
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                        ],
                        insertCount: 1,
                        thumbsUpCount: 1,
                        thumbsDownCount: 1,
                        userMessageCount: 1,
                        handleTime: 1000000,
                        humanAgentResponseDelay: 1000000,
                        humanAgents: ["humanAgents", "humanAgents"],
                        humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                        users: ["users", "users"],
                    },
                    deleted: true,
                },
                {
                    responseConfig: {
                        capabilities: ["MARKDOWN", "MARKDOWN"],
                        isCopilot: true,
                        responseLength: "SHORT",
                    },
                    subject: "subject",
                    url: "url",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    tags: ["tags"],
                    metadata: {
                        metadata: "metadata",
                    },
                    allMetadata: {
                        allMetadata: {
                            allMetadata: "allMetadata",
                        },
                    },
                    conversationId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    analysis: {
                        userRequest: "userRequest",
                        agentResponse: "agentResponse",
                        resolutionStatus: "resolutionStatus",
                        category: "category",
                        sentiment: "POSITIVE",
                        quality: "GOOD",
                        qualityReason: "MISSING_KNOWLEDGE",
                        resolvedByMaven: true,
                        primaryLanguage: "primaryLanguage",
                        predictedNps: 1.1,
                    },
                    summary: {
                        actionIds: [
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                        ],
                        incompleteActionIds: [
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                            {
                                type: "AGENT",
                                appId: "appId",
                                referenceId: "referenceId",
                            },
                        ],
                        insertCount: 1,
                        thumbsUpCount: 1,
                        thumbsDownCount: 1,
                        userMessageCount: 1,
                        handleTime: 1000000,
                        humanAgentResponseDelay: 1000000,
                        humanAgents: ["humanAgents", "humanAgents"],
                        humanAgentsWithInserts: ["humanAgentsWithInserts", "humanAgentsWithInserts"],
                        users: ["users", "users"],
                    },
                    deleted: true,
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        });
    });
});
