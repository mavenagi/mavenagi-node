/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import * as MavenAGI from "../../src/api/index";
import { MavenAGIClient } from "../../src/Client";

describe("Triggers", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            triggers: [
                {
                    triggerId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    enabled: true,
                    description: "description",
                    type: "CONVERSATION_CREATED",
                },
                {
                    triggerId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    enabled: true,
                    description: "description",
                    type: "CONVERSATION_CREATED",
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        };
        server
            .mockEndpoint()
            .post("/v1/triggers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.search({});
        expect(response).toEqual({
            triggers: [
                {
                    triggerId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    enabled: true,
                    description: "description",
                    type: "CONVERSATION_CREATED",
                },
                {
                    triggerId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    enabled: true,
                    description: "description",
                    type: "CONVERSATION_CREATED",
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        });
    });

    test("createOrUpdate", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            triggerId: { referenceId: "store-in-snowflake" },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
        };
        const rawResponseBody = {
            triggerId: {
                referenceId: "store-in-snowflake",
                appId: "snowflake",
                organizationId: "acme",
                agentId: "support",
                type: "EVENT_TRIGGER",
            },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
            enabled: true,
        };
        server
            .mockEndpoint()
            .put("/v1/triggers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.createOrUpdate({
            triggerId: {
                referenceId: "store-in-snowflake",
            },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
        });
        expect(response).toEqual({
            triggerId: {
                referenceId: "store-in-snowflake",
                appId: "snowflake",
                organizationId: "acme",
                agentId: "support",
                type: "EVENT_TRIGGER",
            },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
            enabled: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            triggerId: {
                referenceId: "store-in-snowflake",
                appId: "snowflake",
                organizationId: "acme",
                agentId: "support",
                type: "EVENT_TRIGGER",
            },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
            enabled: true,
        };
        server
            .mockEndpoint()
            .get("/v1/triggers/store-in-snowflake")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.get("store-in-snowflake");
        expect(response).toEqual({
            triggerId: {
                referenceId: "store-in-snowflake",
                appId: "snowflake",
                organizationId: "acme",
                agentId: "support",
                type: "EVENT_TRIGGER",
            },
            description: "Stores conversation data in Snowflake",
            type: "CONVERSATION_CREATED",
            enabled: true,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        server.mockEndpoint().delete("/v1/triggers/store-in-snowflake").respondWith().statusCode(200).build();

        const response = await client.triggers.delete("store-in-snowflake");
        expect(response).toEqual(undefined);
    });

    test("partialUpdate", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            triggerId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            enabled: true,
            description: "description",
            type: "CONVERSATION_CREATED",
        };
        server
            .mockEndpoint()
            .patch("/v1/triggers/triggerReferenceId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.triggers.partialUpdate("triggerReferenceId", {
            body: {},
        });
        expect(response).toEqual({
            triggerId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            enabled: true,
            description: "description",
            type: "CONVERSATION_CREATED",
        });
    });
});
