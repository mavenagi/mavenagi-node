/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";

describe("AppSettings", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            results: [
                { organizationId: "organizationId", agentId: "agentId", settings: { settings: { key: "value" } } },
                { organizationId: "organizationId", agentId: "agentId", settings: { settings: { key: "value" } } },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/app-settings/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.appSettings.search({
            index: "index",
        });
        expect(response).toEqual({
            results: [
                {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    settings: {
                        settings: {
                            key: "value",
                        },
                    },
                },
                {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    settings: {
                        settings: {
                            key: "value",
                        },
                    },
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { string: { key: "value" } };
        server.mockEndpoint().get("/v1/app-settings").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.appSettings.get();
        expect(response).toEqual({
            string: {
                key: "value",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { string: { key: "value" } };
        const rawResponseBody = { string: { key: "value" } };
        server
            .mockEndpoint()
            .patch("/v1/app-settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.appSettings.update({
            string: {
                key: "value",
            },
        });
        expect(response).toEqual({
            string: {
                key: "value",
            },
        });
    });
});
