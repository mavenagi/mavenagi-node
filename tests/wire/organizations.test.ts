/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";

describe("Organizations", () => {
    test("getConversationTable", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            conversationFilter: { languages: ["en", "es"] },
            timeGrouping: "DAY",
            fieldGroupings: [{ field: "Category" }],
            columnDefinitions: [
                { header: "count", metric: { type: "count" } },
                { header: "avg_first_response_time", metric: { type: "average", targetField: "FirstResponseTime" } },
                {
                    header: "percentile_handle_time",
                    metric: { type: "percentile", targetField: "HandleTime", percentile: 25 },
                },
            ],
        };
        const rawResponseBody = {
            headers: ["count", "avg_first_response_time", "percentile_first_response_time"],
            rows: [
                {
                    identifier: {
                        Category: { type: "string", value: "Sales" },
                        CreatedAt: { type: "dateTime", value: "2023-10-01T00:00:00Z" },
                    },
                    data: {
                        count: { type: "double", value: 5 },
                        avg_first_response_time: { type: "millisecond", value: 150 },
                        percentile_handle_time: { type: "millisecond", value: 110 },
                    },
                },
                {
                    identifier: {
                        Category: { type: "string", value: "Support" },
                        CreatedAt: { type: "dateTime", value: "2023-10-01T00:00:00Z" },
                    },
                    data: {
                        count: { type: "double", value: 10 },
                        avg_first_response_time: { type: "millisecond", value: 300 },
                        percentile_handle_time: { type: "millisecond", value: 250 },
                    },
                },
                {
                    identifier: {
                        Category: {
                            type: "string",
                            value: "Sales",
                            CreatedAt: { type: "dateTime", value: "2023-10-02T00:00:00Z" },
                        },
                    },
                    data: {
                        count: { type: "double", value: 7 },
                        avg_first_response_time: { type: "millisecond", value: 180 },
                        percentile_handle_time: { type: "millisecond", value: 180 },
                    },
                },
                {
                    identifier: {
                        Category: { type: "string", value: "Support" },
                        CreatedAt: { type: "dateTime", value: "2023-10-02T00:00:00Z" },
                    },
                    data: {
                        count: { type: "double", value: 8 },
                        avg_first_response_time: { type: "millisecond", value: 320 },
                        percentile_handle_time: { type: "millisecond", value: 220 },
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v1/organizations/tables/conversations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.getConversationTable({
            conversationFilter: {
                languages: ["en", "es"],
            },
            timeGrouping: "DAY",
            fieldGroupings: [
                {
                    field: "Category",
                },
            ],
            columnDefinitions: [
                {
                    header: "count",
                    metric: {
                        type: "count",
                    },
                },
                {
                    header: "avg_first_response_time",
                    metric: {
                        type: "average",
                        targetField: "FirstResponseTime",
                    },
                },
                {
                    header: "percentile_handle_time",
                    metric: {
                        type: "percentile",
                        targetField: "HandleTime",
                        percentile: 25,
                    },
                },
            ],
        });
        expect(response).toEqual({
            headers: ["count", "avg_first_response_time", "percentile_first_response_time"],
            rows: [
                {
                    identifier: {
                        ["Category"]: {
                            type: "string",
                            value: "Sales",
                        },
                        ["CreatedAt"]: {
                            type: "dateTime",
                            value: "2023-10-01T00:00:00Z",
                        },
                    },
                    data: {
                        count: {
                            type: "double",
                            value: 5,
                        },
                        avg_first_response_time: {
                            type: "millisecond",
                            value: 150,
                        },
                        percentile_handle_time: {
                            type: "millisecond",
                            value: 110,
                        },
                    },
                },
                {
                    identifier: {
                        ["Category"]: {
                            type: "string",
                            value: "Support",
                        },
                        ["CreatedAt"]: {
                            type: "dateTime",
                            value: "2023-10-01T00:00:00Z",
                        },
                    },
                    data: {
                        count: {
                            type: "double",
                            value: 10,
                        },
                        avg_first_response_time: {
                            type: "millisecond",
                            value: 300,
                        },
                        percentile_handle_time: {
                            type: "millisecond",
                            value: 250,
                        },
                    },
                },
                {
                    identifier: {
                        ["Category"]: {
                            type: "string",
                            value: "Sales",
                        },
                    },
                    data: {
                        count: {
                            type: "double",
                            value: 7,
                        },
                        avg_first_response_time: {
                            type: "millisecond",
                            value: 180,
                        },
                        percentile_handle_time: {
                            type: "millisecond",
                            value: 180,
                        },
                    },
                },
                {
                    identifier: {
                        ["Category"]: {
                            type: "string",
                            value: "Support",
                        },
                        ["CreatedAt"]: {
                            type: "dateTime",
                            value: "2023-10-02T00:00:00Z",
                        },
                    },
                    data: {
                        count: {
                            type: "double",
                            value: 8,
                        },
                        avg_first_response_time: {
                            type: "millisecond",
                            value: 320,
                        },
                        percentile_handle_time: {
                            type: "millisecond",
                            value: 220,
                        },
                    },
                },
            ],
        });
    });

    test("getConversationChart", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            type: "pieChart",
            conversationFilter: { languages: ["en", "es"] },
            groupBy: { field: "Category" },
            metric: { type: "count" },
        };
        const rawResponseBody = {
            type: "pieChart",
            series: {
                name: "Series",
                data: [
                    { label: "Sales", y: 5 },
                    { label: "Support", y: 10 },
                ],
            },
        };
        server
            .mockEndpoint()
            .post("/v1/organizations/charts/conversations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.getConversationChart({
            type: "pieChart",
            conversationFilter: {
                languages: ["en", "es"],
            },
            groupBy: {
                field: "Category",
            },
            metric: {
                type: "count",
            },
        });
        expect(response).toEqual({
            type: "pieChart",
            series: {
                name: "Series",
                data: [
                    {
                        label: "Sales",
                        y: 5,
                    },
                    {
                        label: "Support",
                        y: 10,
                    },
                ],
            },
        });
    });
});
