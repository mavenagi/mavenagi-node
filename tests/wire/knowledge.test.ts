/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { MavenAGIClient } from "../../src/Client";

describe("Knowledge", () => {
    test("createOrUpdateKnowledgeBase", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { knowledgeBaseId: { referenceId: "help-center" }, name: "Help center" };
        const rawResponseBody = {
            knowledgeBaseId: {
                referenceId: "help-center",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_BASE",
            },
            name: "Help center",
            type: "API",
            metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/v1/knowledge")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.createOrUpdateKnowledgeBase({
            knowledgeBaseId: {
                referenceId: "help-center",
            },
            name: "Help center",
        });
        expect(response).toEqual({
            knowledgeBaseId: {
                referenceId: "help-center",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_BASE",
            },
            name: "Help center",
            type: "API",
            metadata: {
                key: "value",
            },
        });
    });

    test("getKnowledgeBase", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            knowledgeBaseId: {
                referenceId: "help-center",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_BASE",
            },
            name: "Help center",
            type: "API",
            metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/v1/knowledge/help-center")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.getKnowledgeBase("help-center");
        expect(response).toEqual({
            knowledgeBaseId: {
                referenceId: "help-center",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_BASE",
            },
            name: "Help center",
            type: "API",
            metadata: {
                key: "value",
            },
        });
    });

    test("createKnowledgeBaseVersion", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        };
        const rawResponseBody = {
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        };
        server
            .mockEndpoint()
            .post("/v1/knowledge/help-center/version")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.createKnowledgeBaseVersion("help-center", {
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        });
        expect(response).toEqual({
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        });
    });

    test("finalizeKnowledgeBaseVersion", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            versionId: { type: "KNOWLEDGE_BASE_VERSION", referenceId: "versionId", appId: "maven" },
            status: "SUCCEEDED",
        };
        const rawResponseBody = {
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        };
        server
            .mockEndpoint()
            .post("/v1/knowledge/help-center/version/finalize")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.finalizeKnowledgeBaseVersion("help-center", {
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
            },
            status: "SUCCEEDED",
        });
        expect(response).toEqual({
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
                organizationId: "acme",
                agentId: "support",
            },
            type: "FULL",
            status: "IN_PROGRESS",
        });
    });

    test("createKnowledgeDocument", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            knowledgeDocumentId: { referenceId: "getting-started" },
            versionId: { type: "KNOWLEDGE_BASE_VERSION", referenceId: "versionId", appId: "maven" },
            contentType: "MARKDOWN",
            content: "## Getting started\\nThis is a getting started guide for the help center.",
            title: "Getting started",
            metadata: { category: "getting-started" },
        };
        const rawResponseBody = {
            knowledgeDocumentId: {
                referenceId: "getting-started",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_DOCUMENT",
            },
            content: "## Getting started This is a getting started guide for the help center.",
            title: "Getting started",
            metadata: { category: "getting-started" },
        };
        server
            .mockEndpoint()
            .post("/v1/knowledge/help-center/document")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.createKnowledgeDocument("help-center", {
            knowledgeDocumentId: {
                referenceId: "getting-started",
            },
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
            },
            contentType: "MARKDOWN",
            content: "## Getting started\\nThis is a getting started guide for the help center.",
            title: "Getting started",
            metadata: {
                category: "getting-started",
            },
        });
        expect(response).toEqual({
            knowledgeDocumentId: {
                referenceId: "getting-started",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_DOCUMENT",
            },
            content: "## Getting started This is a getting started guide for the help center.",
            title: "Getting started",
            metadata: {
                category: "getting-started",
            },
        });
    });

    test("updateKnowledgeDocument", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            knowledgeDocumentId: { referenceId: "getting-started" },
            versionId: { type: "KNOWLEDGE_BASE_VERSION", referenceId: "versionId", appId: "maven" },
            contentType: "MARKDOWN",
            content: "## Getting started\\nThis is a getting started guide for the help center.",
            title: "Getting started",
            metadata: { category: "getting-started" },
        };
        const rawResponseBody = {
            knowledgeDocumentId: {
                referenceId: "getting-started",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_DOCUMENT",
            },
            content: "## Getting started This is a getting started guide for the help center.",
            title: "Getting started",
            metadata: { category: "getting-started" },
        };
        server
            .mockEndpoint()
            .put("/v1/knowledge/help-center/document")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.knowledge.updateKnowledgeDocument("help-center", {
            knowledgeDocumentId: {
                referenceId: "getting-started",
            },
            versionId: {
                type: "KNOWLEDGE_BASE_VERSION",
                referenceId: "versionId",
                appId: "maven",
            },
            contentType: "MARKDOWN",
            content: "## Getting started\\nThis is a getting started guide for the help center.",
            title: "Getting started",
            metadata: {
                category: "getting-started",
            },
        });
        expect(response).toEqual({
            knowledgeDocumentId: {
                referenceId: "getting-started",
                appId: "readme",
                organizationId: "acme",
                agentId: "support",
                type: "KNOWLEDGE_DOCUMENT",
            },
            content: "## Getting started This is a getting started guide for the help center.",
            title: "Getting started",
            metadata: {
                category: "getting-started",
            },
        });
    });

    test("deleteKnowledgeDocument", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        server
            .mockEndpoint()
            .delete("/v1/knowledge/help-center/getting-started/document")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.knowledge.deleteKnowledgeDocument("help-center", "getting-started");
        expect(response).toEqual(undefined);
    });
});
