/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import * as MavenAGI from "../../src/api/index";
import { MavenAGIClient } from "../../src/Client";

describe("Agents", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            agents: [
                {
                    agentId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    name: "name",
                    createdAt: "2024-01-15T09:30:00Z",
                    environment: "DEMO",
                },
                {
                    agentId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    name: "name",
                    createdAt: "2024-01-15T09:30:00Z",
                    environment: "DEMO",
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        };
        server
            .mockEndpoint()
            .post("/v1/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.search({});
        expect(response).toEqual({
            agents: [
                {
                    agentId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    name: "name",
                    createdAt: "2024-01-15T09:30:00Z",
                    environment: "DEMO",
                },
                {
                    agentId: {
                        organizationId: "organizationId",
                        agentId: "agentId",
                        type: "AGENT",
                        appId: "appId",
                        referenceId: "referenceId",
                    },
                    name: "name",
                    createdAt: "2024-01-15T09:30:00Z",
                    environment: "DEMO",
                },
            ],
            number: 1,
            size: 1,
            totalElements: 1000000,
            totalPages: 1,
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = [
            {
                agentId: {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    type: "AGENT",
                    appId: "appId",
                    referenceId: "referenceId",
                },
                name: "name",
                createdAt: "2024-01-15T09:30:00Z",
                environment: "DEMO",
            },
            {
                agentId: {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    type: "AGENT",
                    appId: "appId",
                    referenceId: "referenceId",
                },
                name: "name",
                createdAt: "2024-01-15T09:30:00Z",
                environment: "DEMO",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/organizations/organizationReferenceId/agents")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.list("organizationReferenceId");
        expect(response).toEqual([
            {
                agentId: {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    type: "AGENT",
                    appId: "appId",
                    referenceId: "referenceId",
                },
                name: "name",
                createdAt: "2024-01-15T09:30:00Z",
                environment: "DEMO",
            },
            {
                agentId: {
                    organizationId: "organizationId",
                    agentId: "agentId",
                    type: "AGENT",
                    appId: "appId",
                    referenceId: "referenceId",
                },
                name: "name",
                createdAt: "2024-01-15T09:30:00Z",
                environment: "DEMO",
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new MavenAGIClient({
            appId: "test",
            appSecret: "test",
            organizationId: "test",
            agentId: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            agentId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            name: "name",
            createdAt: "2024-01-15T09:30:00Z",
            environment: "DEMO",
        };
        server
            .mockEndpoint()
            .get("/v1/organizations/organizationReferenceId/agents/agentReferenceId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.get("organizationReferenceId", "agentReferenceId");
        expect(response).toEqual({
            agentId: {
                organizationId: "organizationId",
                agentId: "agentId",
                type: "AGENT",
                appId: "appId",
                referenceId: "referenceId",
            },
            name: "name",
            createdAt: "2024-01-15T09:30:00Z",
            environment: "DEMO",
        });
    });
});
