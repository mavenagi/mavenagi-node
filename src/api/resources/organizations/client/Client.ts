/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as MavenAGI from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Organizations {
    export interface Options {
        environment?: core.Supplier<environments.MavenAGIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        appId?: core.Supplier<string | undefined>;
        appSecret?: core.Supplier<string | undefined>;
        /** Override the X-Organization-Id header */
        organizationId: core.Supplier<string>;
        /** Override the X-Agent-Id header */
        agentId: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Organization-Id header */
        organizationId?: string;
        /** Override the X-Agent-Id header */
        agentId?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Organizations {
    protected readonly _options: Organizations.Options;

    constructor(_options: Organizations.Options) {
        this._options = _options;
    }

    /**
     * Retrieves structured conversation data across all organizations, formatted as a table,
     * allowing users to group, filter, and define specific metrics to display as columns.
     *
     * <Tip>
     * This endpoint requires additional permissions. Contact support to request access.
     * </Tip>
     *
     * @param {MavenAGI.ConversationTableRequest} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MavenAGI.NotFoundError}
     * @throws {@link MavenAGI.BadRequestError}
     * @throws {@link MavenAGI.ServerError}
     *
     * @example
     *     await client.organizations.getConversationTable({
     *         conversationFilter: {
     *             languages: ["en", "es"]
     *         },
     *         timeGrouping: "DAY",
     *         fieldGroupings: [{
     *                 field: "Category"
     *             }],
     *         columnDefinitions: [{
     *                 header: "count",
     *                 metric: {
     *                     type: "count"
     *                 }
     *             }, {
     *                 header: "avg_first_response_time",
     *                 metric: {
     *                     type: "average",
     *                     targetField: "FirstResponseTime"
     *                 }
     *             }, {
     *                 header: "percentile_handle_time",
     *                 metric: {
     *                     type: "percentile",
     *                     targetField: "HandleTime",
     *                     percentile: 25
     *                 }
     *             }]
     *     })
     */
    public getConversationTable(
        request: MavenAGI.ConversationTableRequest,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<MavenAGI.ConversationTableResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getConversationTable(request, requestOptions));
    }

    private async __getConversationTable(
        request: MavenAGI.ConversationTableRequest,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<MavenAGI.ConversationTableResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MavenAGIEnvironment.Production,
                "/v1/organizations/tables/conversations",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Organization-Id": requestOptions?.organizationId,
                    "X-Agent-Id": requestOptions?.agentId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.ConversationTableRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ConversationTableResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new MavenAGI.NotFoundError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 400:
                    throw new MavenAGI.BadRequestError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 500:
                    throw new MavenAGI.ServerError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MavenAGIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MavenAGIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MavenAGITimeoutError(
                    "Timeout exceeded when calling POST /v1/organizations/tables/conversations.",
                );
            case "unknown":
                throw new errors.MavenAGIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Fetches conversation data across all organizations, visualized in a chart format.
     * Supported chart types include pie chart, date histogram, and stacked bar charts.
     *
     * <Tip>
     * This endpoint requires additional permissions. Contact support to request access.
     * </Tip>
     *
     * @param {MavenAGI.ConversationChartRequest} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MavenAGI.NotFoundError}
     * @throws {@link MavenAGI.BadRequestError}
     * @throws {@link MavenAGI.ServerError}
     *
     * @example
     *     await client.organizations.getConversationChart({
     *         type: "pieChart",
     *         conversationFilter: {
     *             languages: ["en", "es"]
     *         },
     *         groupBy: {
     *             field: "Category"
     *         },
     *         metric: {
     *             type: "count"
     *         }
     *     })
     *
     * @example
     *     await client.organizations.getConversationChart({
     *         type: "dateHistogram",
     *         conversationFilter: {
     *             languages: ["en", "es"]
     *         },
     *         timeInterval: "DAY",
     *         groupBy: {
     *             field: "Category"
     *         },
     *         metric: {
     *             type: "count"
     *         }
     *     })
     *
     * @example
     *     await client.organizations.getConversationChart({
     *         type: "barChart",
     *         conversationFilter: {
     *             languages: ["en", "es"]
     *         },
     *         barDefinition: {
     *             field: "Category"
     *         },
     *         metric: {
     *             type: "count"
     *         },
     *         verticalGrouping: {
     *             field: "ResolutionStatus"
     *         }
     *     })
     */
    public getConversationChart(
        request: MavenAGI.ConversationChartRequest,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<MavenAGI.ChartResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getConversationChart(request, requestOptions));
    }

    private async __getConversationChart(
        request: MavenAGI.ConversationChartRequest,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<MavenAGI.ChartResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MavenAGIEnvironment.Production,
                "/v1/organizations/charts/conversations",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Organization-Id": requestOptions?.organizationId,
                    "X-Agent-Id": requestOptions?.agentId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.ConversationChartRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ChartResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new MavenAGI.NotFoundError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 400:
                    throw new MavenAGI.BadRequestError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 500:
                    throw new MavenAGI.ServerError(
                        serializers.ErrorMessage.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MavenAGIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MavenAGIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MavenAGITimeoutError(
                    "Timeout exceeded when calling POST /v1/organizations/charts/conversations.",
                );
            case "unknown":
                throw new errors.MavenAGIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const appId = (await core.Supplier.get(this._options.appId)) ?? process?.env["MAVENAGI_APP_ID"];
        const appSecret = (await core.Supplier.get(this._options.appSecret)) ?? process?.env["MAVENAGI_APP_SECRET"];
        if (appId != null && appSecret != null) {
            return core.BasicAuth.toAuthorizationHeader({
                username: appId,
                password: appSecret,
            });
        }

        return undefined;
    }
}
