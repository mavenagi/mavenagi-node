/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as MavenAGI from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace AppSettings {
    export interface Options {
        environment?: core.Supplier<environments.MavenAGIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        appId?: core.Supplier<string | undefined>;
        appSecret?: core.Supplier<string | undefined>;
        /** Override the X-Organization-Id header */
        organizationId: core.Supplier<string>;
        /** Override the X-Agent-Id header */
        agentId: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Organization-Id header */
        organizationId?: string;
        /** Override the X-Agent-Id header */
        agentId?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class AppSettings {
    protected readonly _options: AppSettings.Options;

    constructor(_options: AppSettings.Options) {
        this._options = _options;
    }

    /**
     * Search for app settings which have the `$index` key set to the provided value.
     *
     * You can set the `$index` key using the Update app settings API.
     *
     * <Warning>This API currently requires an organization ID and agent ID for any agent which is installed on the app. This requirement will be removed in a future update.</Warning>
     *
     * @param {MavenAGI.SearchAppSettingsRequest} request
     * @param {AppSettings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MavenAGI.NotFoundError}
     * @throws {@link MavenAGI.BadRequestError}
     * @throws {@link MavenAGI.ServerError}
     *
     * @example
     *     await client.appSettings.search({
     *         index: "index"
     *     })
     */
    public search(
        request: MavenAGI.SearchAppSettingsRequest,
        requestOptions?: AppSettings.RequestOptions,
    ): core.HttpResponsePromise<MavenAGI.SearchAppSettingsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: MavenAGI.SearchAppSettingsRequest,
        requestOptions?: AppSettings.RequestOptions,
    ): Promise<core.WithRawResponse<MavenAGI.SearchAppSettingsResponse>> {
        const { index } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["index"] = index;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MavenAGIEnvironment.Production,
                "v1/app-settings/search",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Organization-Id": requestOptions?.organizationId,
                    "X-Agent-Id": requestOptions?.agentId,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as MavenAGI.SearchAppSettingsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new MavenAGI.NotFoundError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 400:
                    throw new MavenAGI.BadRequestError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 500:
                    throw new MavenAGI.ServerError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MavenAGIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MavenAGIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MavenAGITimeoutError("Timeout exceeded when calling GET /v1/app-settings/search.");
            case "unknown":
                throw new errors.MavenAGIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get app settings set during installation
     *
     * @param {AppSettings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MavenAGI.NotFoundError}
     * @throws {@link MavenAGI.BadRequestError}
     * @throws {@link MavenAGI.ServerError}
     *
     * @example
     *     await client.appSettings.get()
     */
    public get(requestOptions?: AppSettings.RequestOptions): core.HttpResponsePromise<Record<string, unknown>> {
        return core.HttpResponsePromise.fromPromise(this.__get(requestOptions));
    }

    private async __get(
        requestOptions?: AppSettings.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, unknown>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MavenAGIEnvironment.Production,
                "v1/app-settings",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Organization-Id": requestOptions?.organizationId,
                    "X-Agent-Id": requestOptions?.agentId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Record<string, unknown>, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new MavenAGI.NotFoundError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 400:
                    throw new MavenAGI.BadRequestError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 500:
                    throw new MavenAGI.ServerError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MavenAGIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MavenAGIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MavenAGITimeoutError("Timeout exceeded when calling GET /v1/app-settings.");
            case "unknown":
                throw new errors.MavenAGIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update app settings. Performs a merge of the provided settings with the existing app settings.
     *
     * - If a new key is provided, it will be added to the app settings.
     * - If an existing key is provided, it will be updated.
     * - No keys will be removed.
     *
     * Note that if an array value is provided it will fully replace an existing value as arrays cannot be merged.
     *
     * @param {Record<string, unknown>} request
     * @param {AppSettings.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link MavenAGI.NotFoundError}
     * @throws {@link MavenAGI.BadRequestError}
     * @throws {@link MavenAGI.ServerError}
     *
     * @example
     *     await client.appSettings.update({
     *         "string": {
     *             "key": "value"
     *         }
     *     })
     */
    public update(
        request: Record<string, unknown>,
        requestOptions?: AppSettings.RequestOptions,
    ): core.HttpResponsePromise<Record<string, unknown>> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: Record<string, unknown>,
        requestOptions?: AppSettings.RequestOptions,
    ): Promise<core.WithRawResponse<Record<string, unknown>>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.MavenAGIEnvironment.Production,
                "v1/app-settings",
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Organization-Id": requestOptions?.organizationId,
                    "X-Agent-Id": requestOptions?.agentId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Record<string, unknown>, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new MavenAGI.NotFoundError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 400:
                    throw new MavenAGI.BadRequestError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                case 500:
                    throw new MavenAGI.ServerError(
                        _response.error.body as MavenAGI.ErrorMessage,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.MavenAGIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.MavenAGIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.MavenAGITimeoutError("Timeout exceeded when calling PATCH /v1/app-settings.");
            case "unknown":
                throw new errors.MavenAGIError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const appId = (await core.Supplier.get(this._options.appId)) ?? process?.env["MAVENAGI_APP_ID"];
        const appSecret = (await core.Supplier.get(this._options.appSecret)) ?? process?.env["MAVENAGI_APP_SECRET"];
        if (appId != null && appSecret != null) {
            return core.BasicAuth.toAuthorizationHeader({
                username: appId,
                password: appSecret,
            });
        }

        return undefined;
    }
}
