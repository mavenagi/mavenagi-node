/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as MavenAGI from "../../../index";
import * as qs from "qs";
import { RealtimeSocket } from "./Socket";

export declare namespace Realtime {
    export interface Options {
        environment?: core.Supplier<environments.MavenAGIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        appId?: core.Supplier<string | undefined>;
        appSecret?: core.Supplier<string | undefined>;
        /** Override the X-Organization-Id header */
        organizationId: core.Supplier<string>;
        /** Override the X-Agent-Id header */
        agentId: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface ConnectArgs {
        convId?: string;
        userId?: string;
        audioFormat?: MavenAGI.AudioFormat | undefined;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Realtime {
    constructor(protected readonly _options: Realtime.Options) {}

    public async connect(args: Realtime.ConnectArgs = {}): Promise<RealtimeSocket> {
        const queryParams: Record<string, unknown> = {};
        if (args.convId != null) {
            queryParams["convId"] = args.convId;
        }

        if (args.userId != null) {
            queryParams["userId"] = args.userId;
        }

        if (args.audioFormat != null) {
            queryParams["audioFormat"] = args.audioFormat;
        }

        let headers: Record<string, unknown> = {};
        const socket = new core.ReconnectingWebSocket(
            `${(await core.Supplier.get(this._options.baseUrl)) ?? (await core.Supplier.get(this._options.environment)) ?? environments.MavenAGIEnvironment.Production}/v1/realtime?${qs.stringify(queryParams, { arrayFormat: "repeat" })}`,
            [],
            { debug: args.debug ?? false, maxRetries: args.reconnectAttempts ?? 30 },
            headers,
        );
        return new RealtimeSocket({ socket });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const appId = (await core.Supplier.get(this._options.appId)) ?? process?.env["MAVENAGI_APP_ID"];
        const appSecret = (await core.Supplier.get(this._options.appSecret)) ?? process?.env["MAVENAGI_APP_SECRET"];
        if (appId != null && appSecret != null) {
            return core.BasicAuth.toAuthorizationHeader({
                username: appId,
                password: appSecret,
            });
        }

        return undefined;
    }
}
