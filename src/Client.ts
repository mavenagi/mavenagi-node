/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Actions } from "./api/resources/actions/client/Client.js";
import { Agents } from "./api/resources/agents/client/Client.js";
import { Analytics } from "./api/resources/analytics/client/Client.js";
import { AppSettings } from "./api/resources/appSettings/client/Client.js";
import { Conversation } from "./api/resources/conversation/client/Client.js";
import { Events } from "./api/resources/events/client/Client.js";
import { Inbox } from "./api/resources/inbox/client/Client.js";
import { Knowledge } from "./api/resources/knowledge/client/Client.js";
import { Organizations } from "./api/resources/organizations/client/Client.js";
import { Translations } from "./api/resources/translations/client/Client.js";
import { Triggers } from "./api/resources/triggers/client/Client.js";
import { Users } from "./api/resources/users/client/Client.js";

export declare namespace MavenAGIClient {
    export interface Options {
        environment?: core.Supplier<environments.MavenAGIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        appId?: core.Supplier<string | undefined>;
        appSecret?: core.Supplier<string | undefined>;
        /** Override the X-Organization-Id header */
        organizationId: core.Supplier<string>;
        /** Override the X-Agent-Id header */
        agentId: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Organization-Id header */
        organizationId?: string;
        /** Override the X-Agent-Id header */
        agentId?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class MavenAGIClient {
    protected readonly _options: MavenAGIClient.Options;
    protected _actions: Actions | undefined;
    protected _agents: Agents | undefined;
    protected _analytics: Analytics | undefined;
    protected _appSettings: AppSettings | undefined;
    protected _conversation: Conversation | undefined;
    protected _events: Events | undefined;
    protected _inbox: Inbox | undefined;
    protected _knowledge: Knowledge | undefined;
    protected _organizations: Organizations | undefined;
    protected _translations: Translations | undefined;
    protected _triggers: Triggers | undefined;
    protected _users: Users | undefined;

    constructor(_options: MavenAGIClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Organization-Id": _options?.organizationId,
                    "X-Agent-Id": _options?.agentId,
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "mavenagi",
                    "X-Fern-SDK-Version": "1.0.19",
                    "User-Agent": "mavenagi/1.0.19",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get actions(): Actions {
        return (this._actions ??= new Actions(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get analytics(): Analytics {
        return (this._analytics ??= new Analytics(this._options));
    }

    public get appSettings(): AppSettings {
        return (this._appSettings ??= new AppSettings(this._options));
    }

    public get conversation(): Conversation {
        return (this._conversation ??= new Conversation(this._options));
    }

    public get events(): Events {
        return (this._events ??= new Events(this._options));
    }

    public get inbox(): Inbox {
        return (this._inbox ??= new Inbox(this._options));
    }

    public get knowledge(): Knowledge {
        return (this._knowledge ??= new Knowledge(this._options));
    }

    public get organizations(): Organizations {
        return (this._organizations ??= new Organizations(this._options));
    }

    public get translations(): Translations {
        return (this._translations ??= new Translations(this._options));
    }

    public get triggers(): Triggers {
        return (this._triggers ??= new Triggers(this._options));
    }

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }
}
