/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as MavenAGI from "../../../../api/index";
import * as core from "../../../../core";
import { MetadataPrecondition } from "./MetadataPrecondition";
import { ConversationPrecondition } from "./ConversationPrecondition";

export const Precondition: core.serialization.Schema<serializers.Precondition.Raw, MavenAGI.Precondition> =
    core.serialization
        .union("preconditionType", {
            user: MetadataPrecondition,
            conversation: core.serialization.object({
                value: ConversationPrecondition,
            }),
            group: core.serialization.lazyObject(() => serializers.PreconditionGroup),
        })
        .transform<MavenAGI.Precondition>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace Precondition {
    type Raw = Precondition.User | Precondition.Conversation | Precondition.Group;

    interface User extends MetadataPrecondition.Raw {
        preconditionType: "user";
    }

    interface Conversation {
        preconditionType: "conversation";
        value: ConversationPrecondition.Raw;
    }

    interface Group extends serializers.PreconditionGroup.Raw {
        preconditionType: "group";
    }
}
