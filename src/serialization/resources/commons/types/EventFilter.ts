/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as MavenAGI from "../../../../api/index";
import * as core from "../../../../core";
import { ScopedEntity } from "./ScopedEntity";
import { EventType } from "./EventType";
import { UserEventName } from "./UserEventName";
import { SystemEventName } from "./SystemEventName";

export const EventFilter: core.serialization.ObjectSchema<serializers.EventFilter.Raw, MavenAGI.EventFilter> =
    core.serialization.object({
        search: core.serialization.string().optional(),
        createdAfter: core.serialization.date().optional(),
        createdBefore: core.serialization.date().optional(),
        references: core.serialization.list(ScopedEntity).optional(),
        eventTypes: core.serialization.list(EventType).optional(),
        userEventNames: core.serialization.list(UserEventName).optional(),
        systemEventNames: core.serialization.list(SystemEventName).optional(),
        agentUserIds: core.serialization.list(core.serialization.string()).optional(),
    });

export declare namespace EventFilter {
    export interface Raw {
        search?: string | null;
        createdAfter?: string | null;
        createdBefore?: string | null;
        references?: ScopedEntity.Raw[] | null;
        eventTypes?: EventType.Raw[] | null;
        userEventNames?: UserEventName.Raw[] | null;
        systemEventNames?: SystemEventName.Raw[] | null;
        agentUserIds?: string[] | null;
    }
}
