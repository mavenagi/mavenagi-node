/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as MavenAGI from "../../../../api/index";
import * as core from "../../../../core";
import { MetadataPrecondition } from "./MetadataPrecondition";
import { ConversationExecutedActionPrecondition } from "./ConversationExecutedActionPrecondition";

export const ConversationPrecondition: core.serialization.Schema<
    serializers.ConversationPrecondition.Raw,
    MavenAGI.ConversationPrecondition
> = core.serialization
    .union("conversationPreconditionType", {
        tags: core.serialization.object({
            value: core.serialization.set(core.serialization.string()),
        }),
        metadata: MetadataPrecondition,
        actionExecuted: ConversationExecutedActionPrecondition,
    })
    .transform<MavenAGI.ConversationPrecondition>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ConversationPrecondition {
    type Raw =
        | ConversationPrecondition.Tags
        | ConversationPrecondition.Metadata
        | ConversationPrecondition.ActionExecuted;

    interface Tags {
        conversationPreconditionType: "tags";
        value: string[];
    }

    interface Metadata extends MetadataPrecondition.Raw {
        conversationPreconditionType: "metadata";
    }

    interface ActionExecuted extends ConversationExecutedActionPrecondition.Raw {
        conversationPreconditionType: "actionExecuted";
    }
}
